package org.itri.ccma.tarsan.hibernate;
// Generated Sep 3, 2015 11:03:17 AM by Hibernate Tools 4.3.1
import com.fasterxml.jackson.annotation.JsonIgnore;import javax.persistence.GeneratedValue;import javax.persistence.SequenceGenerator;import javax.persistence.GenerationType;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Users generated by hbm2java
 */
@SuppressWarnings("serial")@Entity
@Table(name = "users")
public class Users implements java.io.Serializable {

	private long usersId;
	private String account;
	private String password;
	private boolean deletedFlag;
	private String tempkey;
	private Date lastActiveDateTime;
	private Date createdDateTime;
	private String ipAddress;
	private Set<Ad2user> ad2users = new HashSet<Ad2user>(0);
	private Set<Userevent> userevents = new HashSet<Userevent>(0);

	public Users() {
	}

	public Users(long usersId, String account, String password, boolean deletedFlag, Date createdDateTime) {
		this.usersId = usersId;
		this.account = account;
		this.password = password;
		this.deletedFlag = deletedFlag;
		this.createdDateTime = createdDateTime;
	}

	public Users(long usersId, String account, String password, boolean deletedFlag, String tempkey,
			Date lastActiveDateTime, Date createdDateTime, String ipAddress, Set<Ad2user> ad2users,
			Set<Userevent> userevents) {
		this.usersId = usersId;
		this.account = account;
		this.password = password;
		this.deletedFlag = deletedFlag;
		this.tempkey = tempkey;
		this.lastActiveDateTime = lastActiveDateTime;
		this.createdDateTime = createdDateTime;
		this.ipAddress = ipAddress;
		this.ad2users = ad2users;
		this.userevents = userevents;
	}

	@SequenceGenerator(name="users_seq", sequenceName="users_users_id_seq", allocationSize=1)	@GeneratedValue(strategy=GenerationType.SEQUENCE, generator="users_seq")	@Id

	@Column(name = "users_id", unique = true, nullable = false)
	public long getUsersId() {
		return this.usersId;
	}

	public void setUsersId(long usersId) {
		this.usersId = usersId;
	}

	@Column(name = "account", nullable = false, length = 128)
	public String getAccount() {
		return this.account;
	}

	public void setAccount(String account) {
		this.account = account;
	}

	@Column(name = "password", nullable = false, length = 128)
	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	@Column(name = "deleted_flag", nullable = false)
	public boolean isDeletedFlag() {
		return this.deletedFlag;
	}

	public void setDeletedFlag(boolean deletedFlag) {
		this.deletedFlag = deletedFlag;
	}

	@Column(name = "tempkey", length = 128)
	public String getTempkey() {
		return this.tempkey;
	}

	public void setTempkey(String tempkey) {
		this.tempkey = tempkey;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "last_active_date_time", length = 29)
	public Date getLastActiveDateTime() {
		return this.lastActiveDateTime;
	}

	public void setLastActiveDateTime(Date lastActiveDateTime) {
		this.lastActiveDateTime = lastActiveDateTime;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created_date_time", nullable = false, length = 29)
	public Date getCreatedDateTime() {
		return this.createdDateTime;
	}

	public void setCreatedDateTime(Date createdDateTime) {
		this.createdDateTime = createdDateTime;
	}

	@Column(name = "ip_address", length = 128)
	public String getIpAddress() {
		return this.ipAddress;
	}

	public void setIpAddress(String ipAddress) {
		this.ipAddress = ipAddress;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "users")
	@JsonIgnore	public Set<Ad2user> getAd2users() {
		return this.ad2users;
	}

	public void setAd2users(Set<Ad2user> ad2users) {
		this.ad2users = ad2users;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "users")
	@JsonIgnore	public Set<Userevent> getUserevents() {
		return this.userevents;
	}

	public void setUserevents(Set<Userevent> userevents) {
		this.userevents = userevents;
	}

}
